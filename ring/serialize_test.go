package ring

import (
	// "fmt"
	"bytes"
	"crypto/elliptic"
	"encoding/asn1"
	"testing"
)

var marshalledSignature = []byte{
	0x30, 0x82, 0x01, 0xda, 0x13, 0x00, 0x02, 0x01, 0x00, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d,
	0x03, 0x01, 0x07, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x08, 0x30, 0x44,
	0x04, 0x20, 0x60, 0xfa, 0x10, 0x96, 0x99, 0xe9, 0xa4, 0x3f, 0xf6, 0xbd, 0x1f, 0x01, 0xdd, 0x74,
	0xa9, 0x04, 0x75, 0xb9, 0x7e, 0xc7, 0xd2, 0x50, 0x92, 0x63, 0x78, 0xcd, 0xdc, 0xa3, 0xb2, 0x7a,
	0x8a, 0xf0, 0x04, 0x20, 0x32, 0x43, 0xb5, 0x93, 0x91, 0x49, 0x5b, 0x2b, 0x3d, 0x92, 0x2f, 0x2d,
	0xfc, 0x92, 0x27, 0x24, 0xee, 0xfe, 0xef, 0x4c, 0x37, 0x73, 0x1d, 0x7c, 0x46, 0x70, 0xe7, 0x5a,
	0x48, 0x41, 0xaf, 0x19, 0x04, 0x20, 0x8b, 0xf1, 0x1f, 0x1a, 0x54, 0x05, 0xeb, 0x3b, 0x2c, 0x11,
	0x86, 0x45, 0x01, 0x2d, 0x69, 0xd3, 0x3c, 0x82, 0x09, 0x19, 0x40, 0xdf, 0x95, 0xbb, 0xc3, 0xbe,
	0x8a, 0x0f, 0x11, 0xc4, 0xe6, 0x29, 0x30, 0x82, 0x01, 0x54, 0x04, 0x20, 0xa9, 0x16, 0x58, 0x5e,
	0x18, 0x3b, 0xb7, 0x09, 0x19, 0x2d, 0xb0, 0xe6, 0xc8, 0xd7, 0x09, 0xb9, 0xd7, 0x38, 0x3b, 0x99,
	0x3c, 0x69, 0x49, 0x99, 0x45, 0xb0, 0xb0, 0xcf, 0xe3, 0xdc, 0x2e, 0xc1, 0x04, 0x20, 0xfc, 0x96,
	0x10, 0xd7, 0xee, 0xb1, 0x9d, 0x09, 0x16, 0xa2, 0x74, 0x23, 0xc2, 0x9e, 0x44, 0x2f, 0x0e, 0x31,
	0xc2, 0xc9, 0x53, 0x96, 0x60, 0xf0, 0x5f, 0xb3, 0x7e, 0x45, 0xcd, 0x1b, 0xf0, 0xbc, 0x04, 0x20,
	0x49, 0x40, 0x36, 0xa7, 0xc5, 0x95, 0xdb, 0x8e, 0x8f, 0x03, 0xa5, 0xe6, 0xf8, 0xa3, 0xcc, 0x86,
	0x2f, 0xa5, 0xf3, 0x72, 0x63, 0x88, 0x31, 0x27, 0x9b, 0x2d, 0x8c, 0x87, 0xbf, 0x3f, 0x10, 0x8c,
	0x04, 0x20, 0xb8, 0xaa, 0x04, 0x7c, 0x61, 0xcd, 0xb3, 0x33, 0x73, 0xeb, 0xe7, 0x2c, 0x27, 0xa0,
	0x98, 0xc0, 0x21, 0x97, 0xda, 0xe6, 0xb7, 0x32, 0xc3, 0x51, 0xdf, 0x66, 0x8f, 0x87, 0x4e, 0x2c,
	0x9f, 0x1c, 0x04, 0x20, 0xe0, 0x9c, 0xa8, 0x60, 0x17, 0xe7, 0xe2, 0x17, 0x48, 0x30, 0x3f, 0xf4,
	0x1c, 0x1b, 0x23, 0xe1, 0x1c, 0x48, 0xed, 0x17, 0x53, 0x9d, 0x68, 0x5f, 0x76, 0xf2, 0xa7, 0x98,
	0xbc, 0x64, 0xde, 0x0e, 0x04, 0x20, 0x5d, 0xb2, 0x86, 0x4b, 0x2a, 0xd3, 0xc2, 0x6c, 0xe6, 0x38,
	0x23, 0x42, 0x76, 0x5a, 0x13, 0xd6, 0x96, 0xe5, 0x2d, 0xf7, 0x60, 0xf6, 0xc3, 0x46, 0x5e, 0x29,
	0xa0, 0xdc, 0xa4, 0x6a, 0xc3, 0xa0, 0x04, 0x20, 0xd5, 0x70, 0x13, 0x3b, 0xc2, 0x15, 0x71, 0xf5,
	0xf5, 0x4a, 0x64, 0x31, 0x05, 0x51, 0x3f, 0xd8, 0x42, 0x9b, 0x19, 0x4a, 0xe1, 0xba, 0x9f, 0x2a,
	0x83, 0x86, 0xae, 0x72, 0xb3, 0x66, 0x1f, 0xe8, 0x04, 0x20, 0x2c, 0x2a, 0xc6, 0x4d, 0xbf, 0x46,
	0x15, 0x18, 0x24, 0xe2, 0x30, 0x53, 0x12, 0x63, 0x7c, 0x99, 0xc2, 0xb8, 0x7d, 0x6d, 0xf0, 0xdd,
	0x5e, 0xf2, 0x83, 0x67, 0x19, 0x07, 0x2d, 0x67, 0x2f, 0x61, 0x04, 0x20, 0xfa, 0xa0, 0xbe, 0x86,
	0xf4, 0x57, 0x92, 0x1e, 0xc3, 0x7c, 0x0e, 0x46, 0x0c, 0xf0, 0xd7, 0x03, 0xd0, 0x7d, 0xc5, 0xf5,
	0x66, 0x1a, 0x45, 0x01, 0x33, 0x40, 0x9a, 0x71, 0x2b, 0x6a, 0x66, 0xab, 0x04, 0x20, 0xd7, 0xba,
	0x65, 0x22, 0x4c, 0xa2, 0x69, 0x78, 0xd9, 0xa5, 0xce, 0x62, 0xfe, 0xb1, 0x1a, 0x83, 0x8f, 0x16,
	0x62, 0x2e, 0xb5, 0x4c, 0xee, 0x3e, 0x67, 0x55, 0x22, 0x9c, 0x18, 0x3c, 0x19, 0x33,
}

func TestMarshal(t *testing.T) {
	t.Parallel()

	sign := getSignature(t, elliptic.P256)
	buffer, err := asn1.Marshal(*sign)
	if err != nil {
		t.Error(err)
	}
	// for i, val := range buffer {
	// 	if i % 16 == 0 {
	// 		fmt.Println()
	// 	}
	// 	fmt.Printf("%#02v, ", val)
	// }
	// fmt.Println()
	if !bytes.Equal(buffer, marshalledSignature) {
		t.Error("Unexpected narshalled values.")
	}
}

func TestUnmarshal(t *testing.T) {
	t.Parallel()

	ref := getSignature(t, elliptic.P256)

	sign := Signature{}
	rest, err := asn1.Unmarshal(marshalledSignature, &sign)
	if err != nil {
		t.Error(err)
	}
	if len(rest) != 0 {
		t.Error("rest is not empty")
	}

	if sign.Name != ref.Name {
		t.Error("Signature.Name doesn't fit.")
	}
	if sign.Version != ref.Version {
		t.Error("Signature.Name doesn't fit.")
	}
	if sign.CurveOID.String() != ref.CurveOID.String() {
		t.Error("Signature.CurveOID doesn't fit.")
	}
	if sign.HasherOID.String() != ref.HasherOID.String() {
		t.Error("Signature.HasherOID doesn't fit.")
	}
	if !bytes.Equal(sign.KeyImage.X, ref.KeyImage.X) {
		t.Error("Signature.KeyImage.X doesn't fit.")
	}
	if !bytes.Equal(sign.KeyImage.Y, ref.KeyImage.Y) {
		t.Error("Signature.KeyImage.Y doesn't fit.")
	}
	if !bytes.Equal(sign.Checksum, ref.Checksum) {
		t.Error("Signature.Checksum doesn't fit.")
	}
	for i, value := range sign.Signatures {
		if !bytes.Equal(value, ref.Signatures[i]) {
			t.Errorf("Signature[%d] doesn't fit.", i)
		}
	}
}
